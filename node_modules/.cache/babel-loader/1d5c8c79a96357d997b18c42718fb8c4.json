{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\Spice_Blue\\\\gitSPice\\\\src\\\\components\\\\Form\\\\AddEditForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from 'react';\nimport { Form, Button, Col, Row } from 'react-bootstrap';\nimport { getData, postData, updateData, deleteData } from '../../store/Action/FormCrud';\nimport { connect } from 'react-redux';\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddEditForm = props => {\n  _s();\n\n  // const task= useSelector(state => state.FormCrudReducer.data);\n  const dispatch = useDispatch();\n  const [description, setDescription] = useState(props.data.description);\n  const [id, setId] = useState(props.data.id);\n  const [date, setDate] = useState(props.data.date);\n  const [time, setTime] = useState(props.data.time);\n  const [assignedTo, setAssignedTo] = useState(props.data.assignedTo);\n  useEffect(() => {\n    if (props.detectOps === \"edit\") {\n      console.log('working as expected');\n      setDescription(props.data.task_msg);\n      setId(props.data.id);\n      setDate(new Date(props.data.task_date).toLocaleDateString('fr-CA'));\n      setTime(props.data.task_time);\n      setAssignedTo(props.data.assigned_user);\n    }\n  });\n\n  const submit = e => {\n    e.preventDefault();\n    var hms = time; // your input string\n\n    var a = hms.split(':'); // split it at the colons\t\t\t\t\n\n    var seconds = +a[0] * 60 * 60 + +a[1] * 60;\n    const params = {\n      task_msg: description,\n      task_date: date,\n      task_time: seconds,\n      is_completed: 1,\n      assigned_user: assignedTo,\n      time_zone: -330\n    };\n\n    if (id === '') {\n      //props.postData(params);\t\n      dispatch(postData(params));\n      props.close();\n      setTimeout(() => {\n        props.updateCompo();\n      }, 2000);\n    } else {\n      dispatch(updateData(params, id)); //this.props.updateData(params, id);\n\n      props.close();\n      setTimeout(() => {\n        props.updateCompo();\n      }, 1000);\n    }\n  };\n\n  const del = () => {\n    const deleteId = id;\n\n    if (deleteId) {\n      dispatch(deleteData(id));\n      props.close();\n      setTimeout(() => {\n        props.updateCompo();\n      }, 1000);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: submit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          xs: 12,\n          sm: 12,\n          md: 12,\n          lg: 12,\n          xl: 12,\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Task Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            required: true,\n            type: \"text\",\n            placeholder: \"Description if task\",\n            onChange: e => setDescription(e.target.value),\n            value: description,\n            name: \"description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n        className: \"acount-filled\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          xs: 6,\n          sm: 6,\n          md: 6,\n          lg: 6,\n          xl: 6,\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            required: true,\n            type: \"date\",\n            onChange: e => setDate(e.target.value),\n            placeholder: \"date\",\n            value: date,\n            name: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          xs: 6,\n          sm: 6,\n          md: 6,\n          lg: 6,\n          xl: 6,\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"time\",\n            onChange: e => setTime(e.target.value),\n            placeholder: \"time\",\n            value: time,\n            name: \"time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n        className: \"acount-filled\",\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          xs: 12,\n          sm: 12,\n          md: 12,\n          lg: 12,\n          xl: 12,\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Assign User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            required: true,\n            type: \"text\",\n            onChange: e => setAssignedTo(e.target.value),\n            placeholder: \"Assign User\",\n            value: assignedTo,\n            name: \"assignedTo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          md: 1,\n          sm: 1,\n          lg: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: 4,\n          sm: 4,\n          lg: 4,\n          children: id === '' ? \"\" : /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              class: \"fa fa-trash-o\",\n              \"aria-hidden\": \"true\",\n              onClick: del\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 10\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: 1,\n          sm: 1,\n          lg: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: 6,\n          sm: 6,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-secondary\",\n            type: \"button\",\n            onClick: props.close,\n            className: \"formBtn\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 9\n          }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"success\",\n            type: \"submit\",\n            className: \"formBtn\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddEditForm, \"Ry7HLZsUM/nOWzN+OdrbPhEri84=\", false, function () {\n  return [useDispatch];\n});\n\n_c = AddEditForm;\nexport default AddEditForm; // class AddEditForm extends Component  {\n//     constructor(props){\n//            super(props);\n//            this.state = {\n//             description: this.props.data.description,\n//             id: this.props.data.id,\t\t\n//             date: this.props.data.date,\n//             time: this.props.data.time,\n//             assignedTo: this.props.data.assignedTo,                        \n//         }\n//         console.log(props)\n//     }\n//     componentDidUpdate(prevProps){\n//         if(this.props.detectOps === \"edit\")\n//         {\n//             console.log('working as expected')\n//                    if(prevProps !==this.props)\n//                    {\n//                         this.setState({\n//                             description:this.props.data.description,\n//                             id: this.props.data.id,\t\t\n//                             date: this.props.data.date,\n//                             time: this.props.data.time,\n//                             assignedTo: this.props.data.assignedTo, \n//                         })\n//                    }\n//         }\n//         else {\n//             if(prevProps !==this.props)\n//             {\n//                 this.setState({\n//                     description: 'Follow up',\n//                     id: '',\t\t\n//                     date: new Date().toLocaleDateString('fr-CA'),\n//                     time: '00:00',\n//                     assignedTo: 'Vetri',\n//                 })\n//             }\n//         }\n//     }\n//     submit = (e) => {\n// \t\te.preventDefault();\n// \t\tconst { description, date, time, assignedTo, id } = this.state;\n// \t\tvar hms = time;   // your input string\n// \t\tvar a = hms.split(':'); // split it at the colons\t\t\t\t\n// \t\tvar seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 ;\n// \t\tconst params = {\t\t\t\t\n// \t\t\ttask_msg:description,\n// \t\t\ttask_date:date,\n// \t\t\ttask_time: seconds,\n// \t\t\tis_completed:1,\t\t\n// \t\t\tassigned_user:assignedTo,\n// \t\t\ttime_zone:-330\n// \t\t}\n// \t\tif (id === '') {\t\t\n//         this.props.postData(params);\t\n//         this.props.close();\t\n//         setTimeout(() => {\n//             this.props.updateCompo();    \n//         }, 2000);\n// \t\t} else {\n//                 this.props.updateData(params, id);\n//                 this.props.close();\t     \n//                 setTimeout(() => {\n//                     this.props.updateCompo();    \n//                 }, 1000);\n// \t\t}\n//     };\n//     handleChange = (e) => {\n// \t\tthis.setState({\n// \t\t\t[e.target.name]: e.target.value\n// \t\t})\n//     };\n//     delete = () => {\n// \t\tconst { id } = this.state;\n// \t\tif (id) {\n//             this.props.deleteData(id)\n// \t\t\tthis.props.close();\t\n//             setTimeout(() => {\n//                 this.props.updateCompo();    \n//             }, 1000);\n// \t\t}\n// \t};\n//     render(){\n//         const{description,date,time,assignedTo,id}=this.state\n//         return (\n//             <Form  onSubmit={this.submit}>\n//             <Form.Row>\n//                 <Form.Group as={Col} xs={12} sm={12} md={12} lg={12} xl={12} >\n//                     <Form.Label>Task Description</Form.Label>\n//                     <Form.Control\n//                         required\n//                         type=\"text\"\n//                         placeholder=\"Description if task\"\n//                         onChange={this.handleChange}\n//                         value={description}\n//                         name=\"description\"\n//                     />\n//                 </Form.Group>\n//             </Form.Row>\n//             <Form.Row className=\"acount-filled\">\n//                 <Form.Group as={Col} xs={6} sm={6} md={6} lg={6} xl={6} >\n//                     <Form.Label>Date</Form.Label>\n//                     <Form.Control\n//                         required\n//                         type=\"date\"\n//                         onChange={this.handleChange}\n//                         placeholder=\"date\"\n//                         value={date}\n//                         name=\"date\"\n//                     />\n//                 </Form.Group>\n//                 <Form.Group as={Col} xs={6} sm={6} md={6} lg={6} xl={6} >\n//                     <Form.Label>Time</Form.Label>\n//                     <Form.Control\n//                         type=\"time\"\n//                         onChange={this.handleChange}\n//                         placeholder=\"time\"\n//                         value={time}\n//                         name=\"time\"\n//                     />\n//                 </Form.Group>\n//             </Form.Row>\n//             <Form.Row className=\"acount-filled\">\n//                 <Form.Group as={Col} xs={12} sm={12} md={12} lg={12} xl={12} >\n//                     <Form.Label>Assign User</Form.Label>\n//                     <Form.Control\n//                         required\n//                         type=\"text\"\n//                         onChange={this.handleChange}\n//                         placeholder=\"Assign User\"\n//                         value={assignedTo}\n//                         name=\"assignedTo\"\n//                     />\n//                 </Form.Group>\n//             </Form.Row>\n//             <Row>\n//                 <Col md={1} sm={1} lg={1}>\n//                 </Col>\n//                 <Col md={4} sm={4}lg={4}>\n//                     {id === '' ? \n//                     \"\"\n//                     :<h4>\n//                         <i class=\"fa fa-trash-o\" aria-hidden=\"true\" onClick={this.delete }></i>\n//                     </h4>\n//                     }\n//                 </Col>\n//                 <Col md={1} sm={1} lg={1}>\n//                 </Col>\n//                 <Col md={6} sm={6}>\n//                     <Button variant=\"outline-secondary\"  type=\"button\" onClick={this.props.close} className=\"formBtn\" >\n//                         Cancel\n//                       </Button>\n//                      &nbsp;\n//                     <Button variant=\"success\" type=\"submit\" className=\"formBtn\">\n//                        Save\n//                       </Button>\n//                 </Col>\n//             </Row>\n//         </Form>\n//         )\n//     }\n// }\n// const mapStateToProps = (state) => (\t\t\n// \t{\t\n// \talltasks: state.FormCrudReducer.Tasks,\n// \tstatusMessage: state.FormCrudReducer.status,\n// }\n// )\n// export default connect(mapStateToProps, { getData, postData, updateData,deleteData })(AddEditForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"AddEditForm\");","map":{"version":3,"sources":["C:/React/Spice_Blue/gitSPice/src/components/Form/AddEditForm.jsx"],"names":["React","Component","useState","useEffect","Form","Button","Col","Row","getData","postData","updateData","deleteData","connect","useDispatch","AddEditForm","props","dispatch","description","setDescription","data","id","setId","date","setDate","time","setTime","assignedTo","setAssignedTo","detectOps","console","log","task_msg","Date","task_date","toLocaleDateString","task_time","assigned_user","submit","e","preventDefault","hms","a","split","seconds","params","is_completed","time_zone","close","setTimeout","updateCompo","del","deleteId","target","value"],"mappings":"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":["import React, { Component,useState,useEffect } from 'react';\r\nimport {  Form, Button, Col, Row } from 'react-bootstrap';\r\nimport { getData, postData, updateData,deleteData } from '../../store/Action/FormCrud';\r\nimport { connect } from 'react-redux';\r\nimport { useDispatch} from \"react-redux\";\r\n\r\nconst AddEditForm =(props)=>{\t\r\n    // const task= useSelector(state => state.FormCrudReducer.data);\r\n\tconst dispatch = useDispatch();\r\nconst [description,setDescription]=useState(props.data.description)\r\nconst [id,setId]=useState(props.data.id);\r\nconst [date,setDate]=useState(props.data.date);\r\nconst[time,setTime]=useState(props.data.time);\r\nconst[assignedTo,setAssignedTo]=useState(props.data.assignedTo)\r\n\r\nuseEffect(() => {\r\n    if(props.detectOps === \"edit\")\r\n        {\r\n                        console.log('working as expected')                                                                \r\n\t\t\t\t\t\tsetDescription(props.data.task_msg);\r\n\t\t\t\t\t\tsetId(props.data.id);\r\n\t\t\t\t\t\tsetDate(new Date(props.data.task_date).toLocaleDateString('fr-CA'))\r\n\t\t\t\t\t\tsetTime(props.data.task_time)\r\n\t\t\t\t\t\tsetAssignedTo(props.data.assigned_user)\t\t\t\t\t\t                                      \r\n        }\r\n})\r\n\r\nconst submit = (e) => {\r\n\t\t\t\r\n    e.preventDefault();\r\n    \r\n    var hms = time;   // your input string\r\n    var a = hms.split(':'); // split it at the colons\t\t\t\t\r\n    var seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 ;\r\n    const params = {\t\t\t\t\r\n        task_msg:description,\r\n        task_date:date,\r\n        task_time: seconds,\r\n        is_completed:1,\t\t\r\n        assigned_user:assignedTo,\r\n        time_zone:-330\r\n    }\r\n    \r\n    if (id === '') {\t\t\r\n            \r\n    //props.postData(params);\t\r\n    dispatch(postData(params))\r\n    props.close();\t\r\n    \r\n    setTimeout(() => {\r\n        props.updateCompo();    \r\n    }, 2000);\r\n    \r\n    \r\n\r\n    } else {\r\n        dispatch(updateData(params, id))\r\n            //this.props.updateData(params, id);\r\n            props.close();\t     \r\n            setTimeout(() => {\r\n                props.updateCompo();    \r\n            }, 1000);\r\n            \r\n    \r\n\r\n    }\r\n\r\n};\r\n\r\nconst del =()=> {\r\n    const deleteId=id \r\n\r\n    if (deleteId) {\r\n        dispatch(deleteData(id))\r\n        props.close();\t\r\n        setTimeout(() => {\r\n            props.updateCompo();    \r\n        }, 1000);\r\n    }\r\n\r\n}\r\n\r\n\r\nreturn(\r\n    <div>\r\n          <Form  onSubmit={submit}>\r\n\r\n<Form.Row>\r\n    <Form.Group as={Col} xs={12} sm={12} md={12} lg={12} xl={12} >\r\n        <Form.Label>Task Description</Form.Label>\r\n        <Form.Control\r\n            required\r\n            type=\"text\"\r\n            placeholder=\"Description if task\"            \r\n            onChange={e => setDescription(e.target.value)}\r\n            value={description}\r\n            name=\"description\"\r\n        />\r\n    </Form.Group>\r\n</Form.Row>\r\n\r\n<Form.Row className=\"acount-filled\">\r\n    <Form.Group as={Col} xs={6} sm={6} md={6} lg={6} xl={6} >\r\n        <Form.Label>Date</Form.Label>\r\n        <Form.Control\r\n            required\r\n            type=\"date\"            \r\n            onChange={e => setDate(e.target.value)}\r\n            placeholder=\"date\"\r\n            value={date}\r\n            name=\"date\"\r\n\r\n        />\r\n    </Form.Group>\r\n    <Form.Group as={Col} xs={6} sm={6} md={6} lg={6} xl={6} >\r\n        <Form.Label>Time</Form.Label>\r\n        <Form.Control\r\n\r\n            type=\"time\"\r\n            \r\n            onChange={e => setTime(e.target.value)}\r\n            placeholder=\"time\"\r\n            value={time}\r\n            name=\"time\"\r\n\r\n\r\n        />\r\n    </Form.Group>\r\n</Form.Row>\r\n<Form.Row className=\"acount-filled\">\r\n    <Form.Group as={Col} xs={12} sm={12} md={12} lg={12} xl={12} >\r\n        <Form.Label>Assign User</Form.Label>\r\n        <Form.Control\r\n            required\r\n            type=\"text\"            \r\n            onChange={e => setAssignedTo(e.target.value)}\r\n            placeholder=\"Assign User\"\r\n            value={assignedTo}\r\n            name=\"assignedTo\"\r\n\r\n        />\r\n    </Form.Group>\r\n</Form.Row>\r\n<Row>\r\n    <Col md={1} sm={1} lg={1}>\r\n    </Col>\r\n    <Col md={4} sm={4}lg={4}>\r\n        {id === '' ? \r\n        \"\"\r\n        :<h4>\r\n            \r\n            <i class=\"fa fa-trash-o\" aria-hidden=\"true\" onClick={del }></i>\r\n        </h4>\r\n        }\r\n        \r\n    </Col>\r\n    <Col md={1} sm={1} lg={1}>\r\n    </Col>\r\n    <Col md={6} sm={6}>\r\n        <Button variant=\"outline-secondary\"  type=\"button\" onClick={props.close} className=\"formBtn\" >\r\n            Cancel\r\n          </Button>\r\n         &nbsp;\r\n        <Button variant=\"success\" type=\"submit\" className=\"formBtn\">\r\n           Save\r\n          </Button>\r\n        \r\n        \r\n        \r\n    </Col>\r\n</Row>\r\n</Form>\r\n    </div>\r\n)\r\n\r\n\r\n\r\n}\r\nexport default AddEditForm\r\n\r\n// class AddEditForm extends Component  {\r\n//     constructor(props){\r\n//            super(props);\r\n//            this.state = {\r\n//             description: this.props.data.description,\r\n//             id: this.props.data.id,\t\t\r\n//             date: this.props.data.date,\r\n//             time: this.props.data.time,\r\n//             assignedTo: this.props.data.assignedTo,                        \r\n//         }\r\n//         console.log(props)\r\n        \r\n//     }\r\n//     componentDidUpdate(prevProps){\r\n//         if(this.props.detectOps === \"edit\")\r\n//         {\r\n//             console.log('working as expected')\r\n//                    if(prevProps !==this.props)\r\n//                    {\r\n//                         this.setState({\r\n//                             description:this.props.data.description,\r\n//                             id: this.props.data.id,\t\t\r\n//                             date: this.props.data.date,\r\n//                             time: this.props.data.time,\r\n//                             assignedTo: this.props.data.assignedTo, \r\n//                         })\r\n//                    }\r\n                   \r\n//         }\r\n//         else {\r\n//             if(prevProps !==this.props)\r\n//             {\r\n//                 this.setState({\r\n//                     description: 'Follow up',\r\n//                     id: '',\t\t\r\n//                     date: new Date().toLocaleDateString('fr-CA'),\r\n//                     time: '00:00',\r\n//                     assignedTo: 'Vetri',\r\n//                 })\r\n//             }\r\n            \r\n//         }\r\n//     }\r\n//     submit = (e) => {\r\n\t\t\t\r\n// \t\te.preventDefault();\r\n// \t\tconst { description, date, time, assignedTo, id } = this.state;\r\n// \t\tvar hms = time;   // your input string\r\n// \t\tvar a = hms.split(':'); // split it at the colons\t\t\t\t\r\n// \t\tvar seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 ;\r\n// \t\tconst params = {\t\t\t\t\r\n// \t\t\ttask_msg:description,\r\n// \t\t\ttask_date:date,\r\n// \t\t\ttask_time: seconds,\r\n// \t\t\tis_completed:1,\t\t\r\n// \t\t\tassigned_user:assignedTo,\r\n// \t\t\ttime_zone:-330\r\n// \t\t}\r\n\t\t\r\n// \t\tif (id === '') {\t\t\r\n            \t\r\n//         this.props.postData(params);\t\r\n//         this.props.close();\t\r\n        \r\n//         setTimeout(() => {\r\n//             this.props.updateCompo();    \r\n//         }, 2000);\r\n        \r\n\t\t\r\n\r\n// \t\t} else {\r\n//                 this.props.updateData(params, id);\r\n//                 this.props.close();\t     \r\n//                 setTimeout(() => {\r\n//                     this.props.updateCompo();    \r\n//                 }, 1000);\r\n                \r\n        \r\n\r\n// \t\t}\r\n\r\n//     };\r\n//     handleChange = (e) => {\r\n// \t\tthis.setState({\r\n// \t\t\t[e.target.name]: e.target.value\r\n// \t\t})\r\n//     };\r\n//     delete = () => {\r\n// \t\tconst { id } = this.state;\r\n\r\n// \t\tif (id) {\r\n//             this.props.deleteData(id)\r\n// \t\t\tthis.props.close();\t\r\n//             setTimeout(() => {\r\n//                 this.props.updateCompo();    \r\n//             }, 1000);\r\n// \t\t}\r\n\r\n// \t};\r\n//     render(){\r\n//         const{description,date,time,assignedTo,id}=this.state\r\n//         return (\r\n//             <Form  onSubmit={this.submit}>\r\n\r\n//             <Form.Row>\r\n//                 <Form.Group as={Col} xs={12} sm={12} md={12} lg={12} xl={12} >\r\n//                     <Form.Label>Task Description</Form.Label>\r\n//                     <Form.Control\r\n//                         required\r\n//                         type=\"text\"\r\n//                         placeholder=\"Description if task\"\r\n//                         onChange={this.handleChange}\r\n//                         value={description}\r\n//                         name=\"description\"\r\n//                     />\r\n//                 </Form.Group>\r\n//             </Form.Row>\r\n\r\n//             <Form.Row className=\"acount-filled\">\r\n//                 <Form.Group as={Col} xs={6} sm={6} md={6} lg={6} xl={6} >\r\n//                     <Form.Label>Date</Form.Label>\r\n//                     <Form.Control\r\n//                         required\r\n//                         type=\"date\"\r\n//                         onChange={this.handleChange}\r\n//                         placeholder=\"date\"\r\n//                         value={date}\r\n//                         name=\"date\"\r\n\r\n//                     />\r\n//                 </Form.Group>\r\n//                 <Form.Group as={Col} xs={6} sm={6} md={6} lg={6} xl={6} >\r\n//                     <Form.Label>Time</Form.Label>\r\n//                     <Form.Control\r\n\r\n//                         type=\"time\"\r\n//                         onChange={this.handleChange}\r\n//                         placeholder=\"time\"\r\n//                         value={time}\r\n//                         name=\"time\"\r\n\r\n\r\n//                     />\r\n//                 </Form.Group>\r\n//             </Form.Row>\r\n//             <Form.Row className=\"acount-filled\">\r\n//                 <Form.Group as={Col} xs={12} sm={12} md={12} lg={12} xl={12} >\r\n//                     <Form.Label>Assign User</Form.Label>\r\n//                     <Form.Control\r\n//                         required\r\n//                         type=\"text\"\r\n//                         onChange={this.handleChange}\r\n//                         placeholder=\"Assign User\"\r\n//                         value={assignedTo}\r\n//                         name=\"assignedTo\"\r\n\r\n//                     />\r\n//                 </Form.Group>\r\n//             </Form.Row>\r\n//             <Row>\r\n//                 <Col md={1} sm={1} lg={1}>\r\n//                 </Col>\r\n//                 <Col md={4} sm={4}lg={4}>\r\n//                     {id === '' ? \r\n//                     \"\"\r\n//                     :<h4>\r\n                        \r\n//                         <i class=\"fa fa-trash-o\" aria-hidden=\"true\" onClick={this.delete }></i>\r\n//                     </h4>\r\n//                     }\r\n                    \r\n//                 </Col>\r\n//                 <Col md={1} sm={1} lg={1}>\r\n//                 </Col>\r\n//                 <Col md={6} sm={6}>\r\n//                     <Button variant=\"outline-secondary\"  type=\"button\" onClick={this.props.close} className=\"formBtn\" >\r\n//                         Cancel\r\n//                       </Button>\r\n//                      &nbsp;\r\n//                     <Button variant=\"success\" type=\"submit\" className=\"formBtn\">\r\n//                        Save\r\n//                       </Button>\r\n                    \r\n                    \r\n                    \r\n//                 </Col>\r\n//             </Row>\r\n//         </Form>\r\n\r\n//         )\r\n//     }\r\n    \r\n// }\r\n// const mapStateToProps = (state) => (\t\t\r\n// \t{\t\r\n// \talltasks: state.FormCrudReducer.Tasks,\r\n// \tstatusMessage: state.FormCrudReducer.status,\r\n// }\r\n// )\r\n\r\n// export default connect(mapStateToProps, { getData, postData, updateData,deleteData })(AddEditForm);\r\n"]},"metadata":{},"sourceType":"module"}