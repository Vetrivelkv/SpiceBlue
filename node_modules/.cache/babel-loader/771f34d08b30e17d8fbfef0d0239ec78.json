{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { Component, useState } from 'react';\nimport { Form, Button, Col, Row } from 'react-bootstrap';\nimport { getData, postData, updateData, deleteData } from '../../store/Action/FormCrud';\nimport { connect } from 'react-redux';\nimport { useDispatch } from \"react-redux\";\n\nconst AddEditForm = () => {\n  _s();\n\n  // const task= useSelector(state => state.FormCrudReducer.data);\n  const dispatch = useDispatch();\n  const [description, setDescription] = useState('');\n  const [id, setId] = useState('');\n  const [date, setDate] = useState(new Date().toLocaleDateString('fr-CA'));\n  const [time, setTime] = useState('00:00');\n  const [assignedTo, setAssignedTo] = useState('');\n  const [hide, setHide] = useState(true);\n  const [listTask, setListTask] = useState([]);\n  const [formOps, setformOps] = useState('');\n  const [result, setResult] = useState('');\n};\n\n_s(AddEditForm, \"grdHEefiKcjSsHf+t14nVLJzcTc=\", false, function () {\n  return [useDispatch];\n});\n\n_c = AddEditForm;\nexport default AddEditForm; // class AddEditForm extends Component  {\n//     constructor(props){\n//            super(props);\n//            this.state = {\n//             description: this.props.data.description,\n//             id: this.props.data.id,\t\t\n//             date: this.props.data.date,\n//             time: this.props.data.time,\n//             assignedTo: this.props.data.assignedTo,                        \n//         }\n//         console.log(props)\n//     }\n//     componentDidUpdate(prevProps){\n//         if(this.props.detectOps === \"edit\")\n//         {\n//             console.log('working as expected')\n//                    if(prevProps !==this.props)\n//                    {\n//                         this.setState({\n//                             description:this.props.data.description,\n//                             id: this.props.data.id,\t\t\n//                             date: this.props.data.date,\n//                             time: this.props.data.time,\n//                             assignedTo: this.props.data.assignedTo, \n//                         })\n//                    }\n//         }\n//         else {\n//             if(prevProps !==this.props)\n//             {\n//                 this.setState({\n//                     description: 'Follow up',\n//                     id: '',\t\t\n//                     date: new Date().toLocaleDateString('fr-CA'),\n//                     time: '00:00',\n//                     assignedTo: 'Vetri',\n//                 })\n//             }\n//         }\n//     }\n//     submit = (e) => {\n// \t\te.preventDefault();\n// \t\tconst { description, date, time, assignedTo, id } = this.state;\n// \t\tvar hms = time;   // your input string\n// \t\tvar a = hms.split(':'); // split it at the colons\t\t\t\t\n// \t\tvar seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 ;\n// \t\tconst params = {\t\t\t\t\n// \t\t\ttask_msg:description,\n// \t\t\ttask_date:date,\n// \t\t\ttask_time: seconds,\n// \t\t\tis_completed:1,\t\t\n// \t\t\tassigned_user:assignedTo,\n// \t\t\ttime_zone:-330\n// \t\t}\n// \t\tif (id === '') {\t\t\n//         this.props.postData(params);\t\n//         this.props.close();\t\n//         setTimeout(() => {\n//             this.props.updateCompo();    \n//         }, 2000);\n// \t\t} else {\n//                 this.props.updateData(params, id);\n//                 this.props.close();\t     \n//                 setTimeout(() => {\n//                     this.props.updateCompo();    \n//                 }, 1000);\n// \t\t}\n//     };\n//     handleChange = (e) => {\n// \t\tthis.setState({\n// \t\t\t[e.target.name]: e.target.value\n// \t\t})\n//     };\n//     delete = () => {\n// \t\tconst { id } = this.state;\n// \t\tif (id) {\n//             this.props.deleteData(id)\n// \t\t\tthis.props.close();\t\n//             setTimeout(() => {\n//                 this.props.updateCompo();    \n//             }, 1000);\n// \t\t}\n// \t};\n//     render(){\n//         const{description,date,time,assignedTo,id}=this.state\n//         return (\n//             <Form  onSubmit={this.submit}>\n//             <Form.Row>\n//                 <Form.Group as={Col} xs={12} sm={12} md={12} lg={12} xl={12} >\n//                     <Form.Label>Task Description</Form.Label>\n//                     <Form.Control\n//                         required\n//                         type=\"text\"\n//                         placeholder=\"Description if task\"\n//                         onChange={this.handleChange}\n//                         value={description}\n//                         name=\"description\"\n//                     />\n//                 </Form.Group>\n//             </Form.Row>\n//             <Form.Row className=\"acount-filled\">\n//                 <Form.Group as={Col} xs={6} sm={6} md={6} lg={6} xl={6} >\n//                     <Form.Label>Date</Form.Label>\n//                     <Form.Control\n//                         required\n//                         type=\"date\"\n//                         onChange={this.handleChange}\n//                         placeholder=\"date\"\n//                         value={date}\n//                         name=\"date\"\n//                     />\n//                 </Form.Group>\n//                 <Form.Group as={Col} xs={6} sm={6} md={6} lg={6} xl={6} >\n//                     <Form.Label>Time</Form.Label>\n//                     <Form.Control\n//                         type=\"time\"\n//                         onChange={this.handleChange}\n//                         placeholder=\"time\"\n//                         value={time}\n//                         name=\"time\"\n//                     />\n//                 </Form.Group>\n//             </Form.Row>\n//             <Form.Row className=\"acount-filled\">\n//                 <Form.Group as={Col} xs={12} sm={12} md={12} lg={12} xl={12} >\n//                     <Form.Label>Assign User</Form.Label>\n//                     <Form.Control\n//                         required\n//                         type=\"text\"\n//                         onChange={this.handleChange}\n//                         placeholder=\"Assign User\"\n//                         value={assignedTo}\n//                         name=\"assignedTo\"\n//                     />\n//                 </Form.Group>\n//             </Form.Row>\n//             <Row>\n//                 <Col md={1} sm={1} lg={1}>\n//                 </Col>\n//                 <Col md={4} sm={4}lg={4}>\n//                     {id === '' ? \n//                     \"\"\n//                     :<h4>\n//                         <i class=\"fa fa-trash-o\" aria-hidden=\"true\" onClick={this.delete }></i>\n//                     </h4>\n//                     }\n//                 </Col>\n//                 <Col md={1} sm={1} lg={1}>\n//                 </Col>\n//                 <Col md={6} sm={6}>\n//                     <Button variant=\"outline-secondary\"  type=\"button\" onClick={this.props.close} className=\"formBtn\" >\n//                         Cancel\n//                       </Button>\n//                      &nbsp;\n//                     <Button variant=\"success\" type=\"submit\" className=\"formBtn\">\n//                        Save\n//                       </Button>\n//                 </Col>\n//             </Row>\n//         </Form>\n//         )\n//     }\n// }\n// const mapStateToProps = (state) => (\t\t\n// \t{\t\n// \talltasks: state.FormCrudReducer.Tasks,\n// \tstatusMessage: state.FormCrudReducer.status,\n// }\n// )\n// export default connect(mapStateToProps, { getData, postData, updateData,deleteData })(AddEditForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"AddEditForm\");","map":{"version":3,"sources":["C:/React/Spice_Blue/gitSPice/src/components/Form/AddEditForm.jsx"],"names":["React","Component","useState","Form","Button","Col","Row","getData","postData","updateData","deleteData","connect","useDispatch","AddEditForm","dispatch","description","setDescription","id","setId","date","setDate","Date","toLocaleDateString","time","setTime","assignedTo","setAssignedTo","hide","setHide","listTask","setListTask","formOps","setformOps","result","setResult"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAAUC,IAAV,EAAgBC,MAAhB,EAAwBC,GAAxB,EAA6BC,GAA7B,QAAwC,iBAAxC;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,UAA5B,EAAuCC,UAAvC,QAAyD,6BAAzD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA2B,aAA3B;;AAEA,MAAMC,WAAW,GAAE,MAAI;AAAA;;AACnB;AACH,QAAMC,QAAQ,GAAGF,WAAW,EAA5B;AACD,QAAM,CAACG,WAAD,EAAaC,cAAb,IAA6Bd,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM,CAACe,EAAD,EAAIC,KAAJ,IAAWhB,QAAQ,CAAC,EAAD,CAAzB;AACA,QAAM,CAACiB,IAAD,EAAMC,OAAN,IAAelB,QAAQ,CAAC,IAAImB,IAAJ,GAAWC,kBAAX,CAA8B,OAA9B,CAAD,CAA7B;AACA,QAAK,CAACC,IAAD,EAAMC,OAAN,IAAetB,QAAQ,CAAC,OAAD,CAA5B;AACA,QAAK,CAACuB,UAAD,EAAYC,aAAZ,IAA2BxB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAK,CAACyB,IAAD,EAAMC,OAAN,IAAe1B,QAAQ,CAAC,IAAD,CAA5B;AACA,QAAM,CAAC2B,QAAD,EAAUC,WAAV,IAAuB5B,QAAQ,CAAC,EAAD,CAArC;AACA,QAAK,CAAC6B,OAAD,EAASC,UAAT,IAAqB9B,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC+B,MAAD,EAAQC,SAAR,IAAmBhC,QAAQ,CAAC,EAAD,CAAjC;AAIC,CAfD;;GAAMW,W;UAEYD,W;;;KAFZC,W;AAgBN,eAAeA,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { Component,useState } from 'react';\r\nimport {  Form, Button, Col, Row } from 'react-bootstrap';\r\nimport { getData, postData, updateData,deleteData } from '../../store/Action/FormCrud';\r\nimport { connect } from 'react-redux';\r\nimport { useDispatch} from \"react-redux\";\r\n\r\nconst AddEditForm =()=>{\t\r\n    // const task= useSelector(state => state.FormCrudReducer.data);\r\n\tconst dispatch = useDispatch();\r\nconst [description,setDescription]=useState('')\r\nconst [id,setId]=useState('');\r\nconst [date,setDate]=useState(new Date().toLocaleDateString('fr-CA'));\r\nconst[time,setTime]=useState('00:00');\r\nconst[assignedTo,setAssignedTo]=useState('')\r\nconst[hide,setHide]=useState(true);\r\nconst [listTask,setListTask]=useState([]);\r\nconst[formOps,setformOps]=useState('');\r\nconst [result,setResult]=useState('');\r\n\r\n\r\n\r\n}\r\nexport default AddEditForm\r\n\r\n// class AddEditForm extends Component  {\r\n//     constructor(props){\r\n//            super(props);\r\n//            this.state = {\r\n//             description: this.props.data.description,\r\n//             id: this.props.data.id,\t\t\r\n//             date: this.props.data.date,\r\n//             time: this.props.data.time,\r\n//             assignedTo: this.props.data.assignedTo,                        \r\n//         }\r\n//         console.log(props)\r\n        \r\n//     }\r\n//     componentDidUpdate(prevProps){\r\n//         if(this.props.detectOps === \"edit\")\r\n//         {\r\n//             console.log('working as expected')\r\n//                    if(prevProps !==this.props)\r\n//                    {\r\n//                         this.setState({\r\n//                             description:this.props.data.description,\r\n//                             id: this.props.data.id,\t\t\r\n//                             date: this.props.data.date,\r\n//                             time: this.props.data.time,\r\n//                             assignedTo: this.props.data.assignedTo, \r\n//                         })\r\n//                    }\r\n                   \r\n//         }\r\n//         else {\r\n//             if(prevProps !==this.props)\r\n//             {\r\n//                 this.setState({\r\n//                     description: 'Follow up',\r\n//                     id: '',\t\t\r\n//                     date: new Date().toLocaleDateString('fr-CA'),\r\n//                     time: '00:00',\r\n//                     assignedTo: 'Vetri',\r\n//                 })\r\n//             }\r\n            \r\n//         }\r\n//     }\r\n//     submit = (e) => {\r\n\t\t\t\r\n// \t\te.preventDefault();\r\n// \t\tconst { description, date, time, assignedTo, id } = this.state;\r\n// \t\tvar hms = time;   // your input string\r\n// \t\tvar a = hms.split(':'); // split it at the colons\t\t\t\t\r\n// \t\tvar seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 ;\r\n// \t\tconst params = {\t\t\t\t\r\n// \t\t\ttask_msg:description,\r\n// \t\t\ttask_date:date,\r\n// \t\t\ttask_time: seconds,\r\n// \t\t\tis_completed:1,\t\t\r\n// \t\t\tassigned_user:assignedTo,\r\n// \t\t\ttime_zone:-330\r\n// \t\t}\r\n\t\t\r\n// \t\tif (id === '') {\t\t\r\n            \t\r\n//         this.props.postData(params);\t\r\n//         this.props.close();\t\r\n        \r\n//         setTimeout(() => {\r\n//             this.props.updateCompo();    \r\n//         }, 2000);\r\n        \r\n\t\t\r\n\r\n// \t\t} else {\r\n//                 this.props.updateData(params, id);\r\n//                 this.props.close();\t     \r\n//                 setTimeout(() => {\r\n//                     this.props.updateCompo();    \r\n//                 }, 1000);\r\n                \r\n        \r\n\r\n// \t\t}\r\n\r\n//     };\r\n//     handleChange = (e) => {\r\n// \t\tthis.setState({\r\n// \t\t\t[e.target.name]: e.target.value\r\n// \t\t})\r\n//     };\r\n//     delete = () => {\r\n// \t\tconst { id } = this.state;\r\n\r\n// \t\tif (id) {\r\n//             this.props.deleteData(id)\r\n// \t\t\tthis.props.close();\t\r\n//             setTimeout(() => {\r\n//                 this.props.updateCompo();    \r\n//             }, 1000);\r\n// \t\t}\r\n\r\n// \t};\r\n//     render(){\r\n//         const{description,date,time,assignedTo,id}=this.state\r\n//         return (\r\n//             <Form  onSubmit={this.submit}>\r\n\r\n//             <Form.Row>\r\n//                 <Form.Group as={Col} xs={12} sm={12} md={12} lg={12} xl={12} >\r\n//                     <Form.Label>Task Description</Form.Label>\r\n//                     <Form.Control\r\n//                         required\r\n//                         type=\"text\"\r\n//                         placeholder=\"Description if task\"\r\n//                         onChange={this.handleChange}\r\n//                         value={description}\r\n//                         name=\"description\"\r\n//                     />\r\n//                 </Form.Group>\r\n//             </Form.Row>\r\n\r\n//             <Form.Row className=\"acount-filled\">\r\n//                 <Form.Group as={Col} xs={6} sm={6} md={6} lg={6} xl={6} >\r\n//                     <Form.Label>Date</Form.Label>\r\n//                     <Form.Control\r\n//                         required\r\n//                         type=\"date\"\r\n//                         onChange={this.handleChange}\r\n//                         placeholder=\"date\"\r\n//                         value={date}\r\n//                         name=\"date\"\r\n\r\n//                     />\r\n//                 </Form.Group>\r\n//                 <Form.Group as={Col} xs={6} sm={6} md={6} lg={6} xl={6} >\r\n//                     <Form.Label>Time</Form.Label>\r\n//                     <Form.Control\r\n\r\n//                         type=\"time\"\r\n//                         onChange={this.handleChange}\r\n//                         placeholder=\"time\"\r\n//                         value={time}\r\n//                         name=\"time\"\r\n\r\n\r\n//                     />\r\n//                 </Form.Group>\r\n//             </Form.Row>\r\n//             <Form.Row className=\"acount-filled\">\r\n//                 <Form.Group as={Col} xs={12} sm={12} md={12} lg={12} xl={12} >\r\n//                     <Form.Label>Assign User</Form.Label>\r\n//                     <Form.Control\r\n//                         required\r\n//                         type=\"text\"\r\n//                         onChange={this.handleChange}\r\n//                         placeholder=\"Assign User\"\r\n//                         value={assignedTo}\r\n//                         name=\"assignedTo\"\r\n\r\n//                     />\r\n//                 </Form.Group>\r\n//             </Form.Row>\r\n//             <Row>\r\n//                 <Col md={1} sm={1} lg={1}>\r\n//                 </Col>\r\n//                 <Col md={4} sm={4}lg={4}>\r\n//                     {id === '' ? \r\n//                     \"\"\r\n//                     :<h4>\r\n                        \r\n//                         <i class=\"fa fa-trash-o\" aria-hidden=\"true\" onClick={this.delete }></i>\r\n//                     </h4>\r\n//                     }\r\n                    \r\n//                 </Col>\r\n//                 <Col md={1} sm={1} lg={1}>\r\n//                 </Col>\r\n//                 <Col md={6} sm={6}>\r\n//                     <Button variant=\"outline-secondary\"  type=\"button\" onClick={this.props.close} className=\"formBtn\" >\r\n//                         Cancel\r\n//                       </Button>\r\n//                      &nbsp;\r\n//                     <Button variant=\"success\" type=\"submit\" className=\"formBtn\">\r\n//                        Save\r\n//                       </Button>\r\n                    \r\n                    \r\n                    \r\n//                 </Col>\r\n//             </Row>\r\n//         </Form>\r\n\r\n//         )\r\n//     }\r\n    \r\n// }\r\n// const mapStateToProps = (state) => (\t\t\r\n// \t{\t\r\n// \talltasks: state.FormCrudReducer.Tasks,\r\n// \tstatusMessage: state.FormCrudReducer.status,\r\n// }\r\n// )\r\n\r\n// export default connect(mapStateToProps, { getData, postData, updateData,deleteData })(AddEditForm);\r\n"]},"metadata":{},"sourceType":"module"}